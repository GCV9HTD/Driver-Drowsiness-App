import React, { useState, useEffect } from "react";
import { Button, Text, View } from "react-native";
import { Camera } from "expo-camera";
import * as tf from "@tensorflow/tfjs";
import "@tensorflow/tfjs-react-native";
import {
  bundleResourceIO,
  decodeJpeg,
  fetch
} from "@tensorflow/tfjs-react-native";

import styles from "../styles/style";

export default function CameraView() {
  const [hasPermission, setHasPermission] = useState(null);
  const [type, setType] = useState(Camera.Constants.Type.front);
  const [isTFReady, setTFReady] = useState(false);
  const modelJSON = require("../model/model.json");
  const modelWeights = require("../model/group1-shard1of1.bin");

  useEffect(() => {
    (async () => {
      try {
        const { status } = await Camera.requestPermissionsAsync();
        setHasPermission(status === "granted");
      } catch (e) {
        console.log(e);
      }
    })();
    (async () => {
      try {
        const model = await tf.loadLayersModel(
          bundleResourceIO(modelJSON, modelWeights)
        );
        console.log("Model loaded");
      } catch (e) {
        console.log(e);
      }
    })();
    (async () => {
      await tf.ready();
      setTFReady(true);
    })();
    // console.log(isTFReady);
  }, []);

  if (hasPermission === null) {
    return <View />;
  }
  if (hasPermission === false) {
    return <Text>No access to camera</Text>;
  }
  return (
    <View style={{ flex: 1 }}>
      <Camera style={{ flex: 1 }} type={type}>
        <View
          style={{
            flex: 1,
            backgroundColor: "transparent",
            flexDirection: "row",
            justifyContent: "center"
          }}
        >
          <View>
            <Text style={{ justifyContent: "center", alignItems: "center" }}>
              Tensorflow.js {tf.version.tfjs} is:
              {isTFReady ? " READY" : " LOADING"}
              {isTFReady && ` and using backend: ${tf.getBackend()}`}
            </Text>
          </View>
          <View style={styles.modelButtonContainer}>
            <Button
              title="Flip Screen"
              color="black"
              style={styles.appButtonText2}
              onPress={() => {
                setType(
                  type === Camera.Constants.Type.back
                    ? Camera.Constants.Type.front
                    : Camera.Constants.Type.back
                );
              }}
            />
          </View>
        </View>
      </Camera>
    </View>
  );
}
